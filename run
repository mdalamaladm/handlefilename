#!/bin/bash

COUNT=0

# Colourise the output
RED='\033[0;31m'        # Red
GRE='\033[0;32m'        # Green
YEL='\033[1;33m'        # Yellow
NCL='\033[0m'           # No Color
META_TYPE=0
META_CATEGORY=1
META_DATE=2
META_PLACE=3
META_STATUS=4
META_CONFIRMED=5

get_meta() {
  local arr
  local IFS=']'
  read -r -a arr <<< "$2"
  echo ${arr[$1]:1}
}

get_meta_order() {
  if [[ $1 == 'TYPE' ]]; then echo $META_TYPE
  elif [[ $1 == 'CATEGORY' ]]; then echo $META_CATEGORY
  elif [[ $1 == 'DATE' ]]; then echo $META_DATE
  elif [[ $1 == 'PLACE' ]]; then echo $META_PLACE
  elif [[ $1 == 'STATUS' ]]; then echo $META_STATUS
  elif [[ $1 == 'CONFIRMED' ]]; then echo $META_CONFIRMED
  fi
}

num_to_arnum() {
	# convert numbers
	local res="${1//1/١}"
	res="${res//2/٢}"
	res="${res//3/٣}"
	res="${res//4/٤}"
	res="${res//5/٥}"
	res="${res//6/٦}"
	res="${res//7/٧}"
	res="${res//8/٨}"
	res="${res//9/٩}"
	res="${res//0/٠}"

	echo "$res"
}

num_to_hijr() {
	local res="${1//"01"/"محرم"}"
	res="${res//"02"/"صفر"}"
	res="${res//"03"/"ربيع الأول"}"
	res="${res//"04"/"ربيع الآخر"}"
	res="${res//"05"/"جمادى الأولى"}"
	res="${res//"06"/"جمادى الآخرة"}"
	res="${res//"07"/"رجب"}"
	res="${res//"08"/"شعبان"}"
	res="${res//"09"/"رمضان"}"
	res="${res//"10"/"شوال"}"
	res="${res//"11"/"ذو القعدة"}"
	res="${res//"12"/"ذو الحجة"}"

	echo "$res"
}

convert_to_ar() {
	# convert type
	res="${1//"NOTYPE"/"نوع مجهول"}"
	res="${res//"DARS"/"الدروس"}"
	res="${res//"KHUTHBAH"/"الخطب"}"
	res="${res//"MUHADHARAH"/"المجاضرات"}"
	res="${res//"FATWA"/"الفتاوى"}"

	# convert category
	res="${res//"NOCATEGORY"/"موضوع مجهول"}"
	res="${res//"ADAB"/"اﻵداب"}"
	res="${res//"AHLUSSUNNAH"/"أهل السنة"}"
	res="${res//"ALQURAN"/"القرآن"}"
	res="${res//"ROMADHON"/"رمضان"}"
	res="${res//"ROQOIQ"/"الرقائق"}"
	res="${res//"SHIYAM"/"الصيام"}"
	res="${res//"SHOLAT"/"الصلاة"}"

	# convert place
	res="${res//"NOPLACE"/"مكان مجهول"}"

	# convert date
	res="${res//"NODATE"/"تاريخ مجهول"}"

	# convert status
	res="${res//"NOCLEAN"/"غير مصفى"}"
	res="${res//"CLEAN"/"مصفى"}"

	# convert confirm
	res="${res//"NOCONFIRM"/"غير متأكد"}"
	res="${res//"CONFIRM"/"متأكد"}"

	echo "$res"
}

handle_file() {
    FILE_NAME="$(basename "${entry}")"
    DIR="$(dirname "${entry}")"
	OLD_NAME="${entry}"

	if [[ $ACTION == "prepend" ]]; then
	        NEW_NAME="$DIR/$ACTIONARG$FILE_NAME"
		mv "$OLD_NAME" "$NEW_NAME";
	elif [[ $ACTION == "insert" ]]; then
		local result
		IFS='|' read -ra result <<< "$ACTIONARG"
		text_target="${result[0]}"
		text_added="${result[1]}"
		insert_direction="${result[2]}"

		if [[ -z $text_target ]]; then echo "Please specify INSERT target"; exit 1; fi
		if [[ -z $text_added ]]; then echo "Please specify INSERT text"; exit 1; fi
		if [[ -z $insert_direction ]]; then echo "Please specify INSERT direction"; exit 1; fi

		if [[ $insert_direction == "b" ]]; then
			NEW_NAME="${OLD_NAME/"$text_target"/"$text_added$text_target"}";
		elif [[ $insert_direction == "a" ]]; then
		 	NEW_NAME="${OLD_NAME/"$text_target"/"$text_target$text_added"}";
		fi

		mv "$OLD_NAME" "$NEW_NAME"
	elif [[ $ACTION == "replace" ]]; then
        local result
        IFS='|' read -ra result <<< "$ACTIONARG"
        text_target="${result[0]}"
        new_text="${result[1]}"

		if [[ -z $text_target ]]; then echo "Please specify REPLACE target"; exit 1; fi
		if [[ -z $new_text ]]; then echo "Please specify REPLACE text"; exit 1; fi

		NEW_NAME="${OLD_NAME/"$text_target"/"$new_text"}";

		mv "$OLD_NAME" "$NEW_NAME"
	elif [[ $ACTION == "remove" ]]; then
		NEW_NAME="$DIR/${FILE_NAME//"$ACTIONARG"/}"

		mv "$OLD_NAME" "$NEW_NAME"
	elif [[ $ACTION == "meta-insert" ]]; then
		local result
		IFS='|' read -ra result <<< "$ACTIONARG"
		meta_order="$(get_meta_order "${result[0]}")"
		meta_added="${result[1]}"
		insert_direction="${result[2]}"

		if [[ -z $meta_order ]]; then echo "Please specify meta order"; exit 1; fi
		if [[ -z $meta_added ]]; then echo "Please specify ${result[0]} INSERT value"; exit 1; fi
		if [[ -z $insert_direction ]]; then echo "Please specify ${result[0]} INSERT direction"; exit 1; fi
		
		local meta_value="$(get_meta $meta_order "$FILE_NAME")"

		if [[ $insert_direction == "b" ]]; then
			NEW_NAME="${OLD_NAME/"[$meta_value]"/"[$meta_added$meta_value]"}";
		elif [[ $insert_direction == "a" ]]; then
		 	NEW_NAME="${OLD_NAME/"[$meta_value]"/"[$meta_value$meta_added]"}";
		fi

		mv "$OLD_NAME" "$NEW_NAME"
	elif [[ $ACTION == "meta-overwrite" ]]; then
		local result
		IFS='|' read -ra result <<< "$ACTIONARG"
		meta_order="$(get_meta_order "${result[0]}")"
		meta_arg="${result[1]}"

		if [[ -z $meta_order ]]; then echo "Please specify meta order"; exit 1; fi
		if [[ -z $meta_arg ]]; then echo "Please specify ${result[0]} OVERWRITE value"; exit 1; fi

		local meta_value="$(get_meta $meta_order "$FILE_NAME")"
		NEW_NAME="${OLD_NAME/"[$meta_value]"/"[$meta_arg]"}";

		mv "$OLD_NAME" "$NEW_NAME"
	elif [[ $ACTION == "meta-replace" ]]; then
		local result
		IFS='|' read -ra result <<< "$ACTIONARG"
		meta_order="$(get_meta_order "${result[0]}")"
		meta_target="${result[1]}"
		meta_replace_value="${result[2]}"

		if [[ -z $meta_order ]]; then echo "Please specify meta order"; exit 1; fi
		if [[ -z $meta_target ]]; then echo "Please specify ${result[0]} REPLACE target"; exit 1; fi
		if [[ -z $meta_replace_value ]]; then echo "Please specify ${result[0]} REPLACE value"; exit 1; fi

		local meta_value="$(get_meta $meta_order "$FILE_NAME")"
		local replaced="${meta_value//"$meta_target"/"$meta_replace_value"}";

		NEW_NAME="${OLD_NAME/"[$meta_value]"/"[$replaced]"}";

		mv "$OLD_NAME" "$NEW_NAME"
	elif [[ $ACTION == "convert-to-ar" ]]; then
		FILE_NAME="$(convert_to_ar "$FILE_NAME")"

		# convert date dynamically
		local date_arr
		local date="$(get_meta $META_DATE "$FILE_NAME")"

		local converted_date_arr=()
		if [[ $date != "تاريخ مجهول" ]]; then
			IFS='-' read -ra date_arr <<< "$date"

			if [[ ! -z ${date_arr[2]} ]]; then
				if [ ${date_arr[2]} -gt 9 ]; then converted_date_arr[0]="$(num_to_arnum ${date_arr[2]})"
				else
					local single_digit="${date_arr[2]:1:1}"

					converted_date_arr[0]="$(num_to_arnum $single_digit)"
				fi
			fi

			if [[ ! -z ${date_arr[1]} ]]; then
				converted_date_arr[1]="من $(num_to_hijr ${date_arr[1]})"
			fi

			if [[ ! -z ${date_arr[0]} ]]; then
				converted_date_arr[2]="$(num_to_arnum ${date_arr[0]})ه"
			fi

			function join_by { local IFS="$1"; shift; echo "$*"; }

			local converted_date="$(join_by " " ${converted_date_arr[@]})"

			FILE_NAME="${FILE_NAME//"[$date]"/"[$converted_date]"}"
		fi

		# finishing
		NEW_NAME="$DIR/$(convert_to_ar "$FILE_NAME")"

		mv "$OLD_NAME" "$NEW_NAME"
	fi

	COUNT=$((COUNT + 1))

    printf "%*s\tOld Name:\t${RED}%s${NCL}\n"      $((indent+4)) '' "$OLD_NAME"
	printf "%*s\tNew Name:\t${GRE}%s${NCL}\n"      $((indent+4)) '' "$NEW_NAME"
	echo ======================================================
}

walk() {
	for entry in "$1"/*; do [[ -f "$entry" ]] && handle_file; done
	
	if [[ $RECURSIVE == "1" ]]; then
		for entry in "$1"/*; do
			if [[ -d "$entry" ]] && [[ $entry != *"(Ignore)"* ]]; then
				walk "$entry";
			fi
		done
	fi
}


if [[ -z "${1}" ]]; then
	echo "Please specify the action";
	exit 1;
else
	ACTION="${1}";
fi

if [[ -z "${2}" ]]; then
	echo "Please specify the path";
	exit 1;
else
	cd "${2}" && ABS_PATH="${PWD}"
fi

if [[ -z "${3}" ]]; then
	echo "Please specify the action argument";
	exit 1; 
else
	ACTIONARG="${3}";
fi

read -p "Are you sure want to prepend all file in '${ABS_PATH}' with $3? (y/n) " choice
case "$choice" in 
  y|Y ) echo "Running handlefilename...";;
  n|N ) exit 1;;
  * ) exit 1;;
esac

read -p "Do you want do it recursively? (y/n (default=n)) " choice
case "$choice" in 
  y|Y ) RECURSIVE=1;;
  n|N ) RECURSIVE=0;;
  * ) RECURSIVE=0;;
esac

walk "${ABS_PATH}"

echo "Total files: $COUNT"
echo
